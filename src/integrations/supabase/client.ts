// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// üéØ CORRE√á√ÉO: Usar as vari√°veis com nomes corretos e valores de fallback
const SUPABASE_URL =
  import.meta.env.VITE_SUPABASE_URL || 'https://hcmjavggiphoulwgcoej.supabase.co';
const SUPABASE_PUBLISHABLE_KEY =
  import.meta.env.VITE_SUPABASE_ANON_KEY ||
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhjbWphdmdnaXBob3Vsd2djb2VqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAzNDUzMzMsImV4cCI6MjA2NTkyMTMzM30.rUBOj4-iEYQ77UaqaSfNFMSi84_Xsf6iTBmE7mWtjv4';

// Environment variables loaded

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Insere um lead na tabela leads do Supabase.
 * @param lead Objeto com os dados do lead.
 * @returns { success: boolean, error?: string }
 */
export async function saveLeadToSupabase(lead: {
  name: string;
  email: string;
  phone?: string | null;
  wants_expert_evaluation?: boolean;
  patrimonio_range?: string | null;
}): Promise<{ success: boolean; error?: string }> {
  try {
    const { error } = await supabase.from('leads').insert({
      name: lead.name,
      email: lead.email,
      phone: lead.phone || null,
      wants_expert_evaluation: lead.wants_expert_evaluation || false,
      patrimonio_range: lead.patrimonio_range || null,
    });

    if (error) {
      return { success: false, error: error.message };
    }

    return { success: true };
  } catch (err) {
    return { success: false, error: err instanceof Error ? err.message : 'Erro desconhecido' };
  }
}

// Fun√ß√£o alternativa usando fetch direto
export async function saveLeadToSupabaseDirectly(lead: {
  name: string;
  email: string;
  phone?: string | null;
  wants_expert_evaluation?: boolean;
  patrimonio_range?: string | null;
}): Promise<{ success: boolean; error?: string }> {
  try {
    const response = await fetch(`${SUPABASE_URL}/rest/v1/leads`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        apikey: SUPABASE_PUBLISHABLE_KEY,
        Authorization: `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
        Prefer: 'return=minimal',
      },
      body: JSON.stringify({
        name: lead.name,
        email: lead.email,
        phone: lead.phone || null,
        wants_expert_evaluation: lead.wants_expert_evaluation || false,
        patrimonio_range: lead.patrimonio_range || null,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return { success: false, error: errorData.message || 'Erro ao salvar lead' };
    }

    return { success: true };
  } catch (err) {
    return { success: false, error: err instanceof Error ? err.message : 'Erro desconhecido' };
  }
}

// Fun√ß√£o usando Edge Function para contornar o bug
export async function saveLeadViaEdgeFunction(lead: {
  name: string;
  email: string;
  phone?: string | null;
  wants_expert_evaluation?: boolean;
  patrimonio_range?: string | null;
  simulation_url?: string;
}): Promise<{ success: boolean; error?: string }> {
  try {
    const response = await fetch(`${SUPABASE_URL}/functions/v1/insert-lead`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
      },
      body: JSON.stringify({
        name: lead.name,
        email: lead.email,
        phone: lead.phone || null,
        wants_expert_evaluation: lead.wants_expert_evaluation || false,
        patrimonio_range: lead.patrimonio_range || null,
        simulation_url: lead.simulation_url || null,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      return { success: false, error: errorData.error || 'Erro ao salvar lead' };
    }

    return { success: true };
  } catch (err) {
    return { success: false, error: err instanceof Error ? err.message : 'Erro desconhecido' };
  }
}

// Adicione este bloco em qualquer arquivo .ts do projeto (idealmente em src/vite-env.d.ts)
declare global {
  interface ImportMetaEnv {
    readonly VITE_SUPABASE_URL: string;
    readonly VITE_SUPABASE_ANON_KEY: string;
    // outras vari√°veis VITE_*
  }
  interface ImportMeta {
    readonly env: ImportMetaEnv;
  }
}
